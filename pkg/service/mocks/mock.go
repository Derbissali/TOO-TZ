// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	model "tidy/pkg/model"

	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockUserService) Create(m *model.User) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserServiceMockRecorder) Create(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserService)(nil).Create), m)
}

// Delete mocks base method.
func (m_2 *MockUserService) Delete(m string) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserServiceMockRecorder) Delete(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserService)(nil).Delete), m)
}

// ReadOne mocks base method.
func (m *MockUserService) ReadOne(id string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOne", id)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadOne indicates an expected call of ReadOne.
func (mr *MockUserServiceMockRecorder) ReadOne(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOne", reflect.TypeOf((*MockUserService)(nil).ReadOne), id)
}

// Update mocks base method.
func (m_2 *MockUserService) Update(m *model.User, id string) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", m, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserServiceMockRecorder) Update(m, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserService)(nil).Update), m, id)
}

// MockSubstringService is a mock of SubstringService interface.
type MockSubstringService struct {
	ctrl     *gomock.Controller
	recorder *MockSubstringServiceMockRecorder
}

// MockSubstringServiceMockRecorder is the mock recorder for MockSubstringService.
type MockSubstringServiceMockRecorder struct {
	mock *MockSubstringService
}

// NewMockSubstringService creates a new mock instance.
func NewMockSubstringService(ctrl *gomock.Controller) *MockSubstringService {
	mock := &MockSubstringService{ctrl: ctrl}
	mock.recorder = &MockSubstringServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubstringService) EXPECT() *MockSubstringServiceMockRecorder {
	return m.recorder
}

// MaxLength mocks base method.
func (m *MockSubstringService) MaxLength(s *string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxLength", s)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MaxLength indicates an expected call of MaxLength.
func (mr *MockSubstringServiceMockRecorder) MaxLength(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxLength", reflect.TypeOf((*MockSubstringService)(nil).MaxLength), s)
}

// MockEmailCheckService is a mock of EmailCheckService interface.
type MockEmailCheckService struct {
	ctrl     *gomock.Controller
	recorder *MockEmailCheckServiceMockRecorder
}

// MockEmailCheckServiceMockRecorder is the mock recorder for MockEmailCheckService.
type MockEmailCheckServiceMockRecorder struct {
	mock *MockEmailCheckService
}

// NewMockEmailCheckService creates a new mock instance.
func NewMockEmailCheckService(ctrl *gomock.Controller) *MockEmailCheckService {
	mock := &MockEmailCheckService{ctrl: ctrl}
	mock.recorder = &MockEmailCheckServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailCheckService) EXPECT() *MockEmailCheckServiceMockRecorder {
	return m.recorder
}

// EmailCheck mocks base method.
func (m *MockEmailCheckService) EmailCheck(s string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailCheck", s)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmailCheck indicates an expected call of EmailCheck.
func (mr *MockEmailCheckServiceMockRecorder) EmailCheck(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailCheck", reflect.TypeOf((*MockEmailCheckService)(nil).EmailCheck), s)
}

// IinCheck mocks base method.
func (m *MockEmailCheckService) IinCheck(s string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IinCheck", s)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IinCheck indicates an expected call of IinCheck.
func (mr *MockEmailCheckServiceMockRecorder) IinCheck(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IinCheck", reflect.TypeOf((*MockEmailCheckService)(nil).IinCheck), s)
}

// MockCounterService is a mock of CounterService interface.
type MockCounterService struct {
	ctrl     *gomock.Controller
	recorder *MockCounterServiceMockRecorder
}

// MockCounterServiceMockRecorder is the mock recorder for MockCounterService.
type MockCounterServiceMockRecorder struct {
	mock *MockCounterService
}

// NewMockCounterService creates a new mock instance.
func NewMockCounterService(ctrl *gomock.Controller) *MockCounterService {
	mock := &MockCounterService{ctrl: ctrl}
	mock.recorder = &MockCounterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounterService) EXPECT() *MockCounterServiceMockRecorder {
	return m.recorder
}

// AddCounter mocks base method.
func (m *MockCounterService) AddCounter(first string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCounter", first)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCounter indicates an expected call of AddCounter.
func (mr *MockCounterServiceMockRecorder) AddCounter(first interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCounter", reflect.TypeOf((*MockCounterService)(nil).AddCounter), first)
}

// GetCounter mocks base method.
func (m *MockCounterService) GetCounter() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockCounterServiceMockRecorder) GetCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockCounterService)(nil).GetCounter))
}

// SubCounter mocks base method.
func (m *MockCounterService) SubCounter(num string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubCounter", num)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubCounter indicates an expected call of SubCounter.
func (mr *MockCounterServiceMockRecorder) SubCounter(num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubCounter", reflect.TypeOf((*MockCounterService)(nil).SubCounter), num)
}

// MockHashCalcService is a mock of HashCalcService interface.
type MockHashCalcService struct {
	ctrl     *gomock.Controller
	recorder *MockHashCalcServiceMockRecorder
}

// MockHashCalcServiceMockRecorder is the mock recorder for MockHashCalcService.
type MockHashCalcServiceMockRecorder struct {
	mock *MockHashCalcService
}

// NewMockHashCalcService creates a new mock instance.
func NewMockHashCalcService(ctrl *gomock.Controller) *MockHashCalcService {
	mock := &MockHashCalcService{ctrl: ctrl}
	mock.recorder = &MockHashCalcServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashCalcService) EXPECT() *MockHashCalcServiceMockRecorder {
	return m.recorder
}

// GetHash mocks base method.
func (m *MockHashCalcService) GetHash(s string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash", s)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHash indicates an expected call of GetHash.
func (mr *MockHashCalcServiceMockRecorder) GetHash(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockHashCalcService)(nil).GetHash), s)
}

// GetID mocks base method.
func (m *MockHashCalcService) GetID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetID indicates an expected call of GetID.
func (mr *MockHashCalcServiceMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockHashCalcService)(nil).GetID))
}
